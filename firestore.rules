rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isWhitelisted(email) {
      return exists(/databases/$(database)/documents/whitelisted_users/$(email));
    }

    function isAdmin(email) {
      return exists(/databases/$(database)/documents/admin_users/$(email));
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null 
        && isWhitelisted(request.auth.token.email);
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isWhitelisted(request.auth.token.email);
    }

    // Students collection
    match /students/{studentId} {
      allow read, write: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && (
          request.auth.uid == resource.data.userId ||
          exists(/databases/$(database)/documents/whitelisted_users/$(request.auth.token.email)) &&
          get(/databases/$(database)/documents/whitelisted_users/$(request.auth.token.email)).data.parentUserId == resource.data.userId
        );
      allow create: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && request.resource.data.userId == request.auth.uid;
    }

    // Admin users collection
    match /admin_users/{email} {
      allow read: if request.auth != null 
        && request.auth.token.email == email;
      allow write: if request.auth != null 
        && isAdmin(request.auth.token.email);
    }

    // Whitelisted users collection
    match /whitelisted_users/{email} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAdmin(request.auth.token.email) || (
          isWhitelisted(request.auth.token.email) &&
          (
            // For creating/updating: Ensure parentUserId matches
            (
              request.resource.data.parentUserId == request.auth.uid &&
              // Check if user is already shared by someone else
              !(exists(/databases/$(database)/documents/whitelisted_users/$(email)) && 
                get(/databases/$(database)/documents/whitelisted_users/$(email)).data.parentUserId != null &&
                get(/databases/$(database)/documents/whitelisted_users/$(email)).data.parentUserId != request.auth.uid)
            ) ||
            // For deleting: Allow if user is the parent
            (
              !request.resource.data.keys().hasAll(['parentUserId']) &&
              resource.data.parentUserId == request.auth.uid
            )
          )
        )
      );
    }

    // Research tasks collection
    match /research_tasks/{taskId} {
      allow read: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && (
          request.auth.uid == resource.data.userId ||
          exists(/databases/$(database)/documents/whitelisted_users/$(request.auth.token.email)) &&
          get(/databases/$(database)/documents/whitelisted_users/$(request.auth.token.email)).data.parentUserId == resource.data.userId
        );
      allow create: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && (
          request.auth.uid == resource.data.userId ||
          exists(/databases/$(database)/documents/whitelisted_users/$(request.auth.token.email)) &&
          get(/databases/$(database)/documents/whitelisted_users/$(request.auth.token.email)).data.parentUserId == resource.data.userId
        );
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      allow read: if request.auth != null 
        && isWhitelisted(request.auth.token.email);
      allow create: if request.auth != null 
        && isWhitelisted(request.auth.token.email);
      allow update, delete: if request.auth != null 
        && isWhitelisted(request.auth.token.email);
    }

    // Plans collection
    match /plans/{planId} {
      allow read: if request.auth != null 
        && isWhitelisted(request.auth.token.email);
      allow create: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && request.resource.data.studentId != null
        && exists(/databases/$(database)/documents/students/$(request.resource.data.studentId))
        && get(/databases/$(database)/documents/students/$(request.resource.data.studentId)).data.userId == request.auth.uid;
      allow update, delete: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && resource.data.studentId != null
        && exists(/databases/$(database)/documents/students/$(resource.data.studentId))
        && get(/databases/$(database)/documents/students/$(resource.data.studentId)).data.userId == request.auth.uid;
    }

    // Pin research requests collection
    match /pin-research-requests/{requestId} {
      allow read: if request.auth != null 
        && isWhitelisted(request.auth.token.email);
      allow create: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && request.resource.data.studentId != null
        && exists(/databases/$(database)/documents/students/$(request.resource.data.studentId))
        && get(/databases/$(database)/documents/students/$(request.resource.data.studentId)).data.userId == request.auth.uid;
      allow update, delete: if request.auth != null 
        && isWhitelisted(request.auth.token.email)
        && resource.data.studentId != null
        && exists(/databases/$(database)/documents/students/$(resource.data.studentId))
        && get(/databases/$(database)/documents/students/$(resource.data.studentId)).data.userId == request.auth.uid;
    }

    // Settings collection (AI settings, etc.)
    match /settings/{document} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && isAdmin(request.auth.token.email);
    }
  }
}
